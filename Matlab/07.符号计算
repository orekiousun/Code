1.符号计算基础：符号计算函数可以完成准确的推导、计算，如求极限、求导、求积分等
    一般使用规则：
        计算中的符号变量需要先定义   syms x
            sym:定义符号变量，一次只能定义一个
            syms:定义符号变量，可以定义多个<一般还是最常用syms>
                sym('x1')   % 定义符号变量，2019版本如果内部是数字可以不用加单引号
                sym('sqrt(200)')   % 将内部转化为符号数据
                syms x   % 将x定义为变量
                syms x y z real   % 定义为实变量，可以一次定义多个
                syms x y z positive   % 定义为正变量
                同时定义多个变量：
                    for i=1:20
                        eval(sprintf('syms x%d', i))   % 将内部的字符串看做语句
                    end
        再调用符号计算相关函数进行处理   r=limit(exp(-x), x, +inf)   % e的-x次方在x接近正无穷时的极限
            limit(f(x), x, +inf)   % 求极限
            diff(f(x), x, 1)   % 对x求一阶导
2.符号表达式的替换subs:将符号表达式中的符号变量用其他符号表达式或数值代替，实现符号的替换<一般直接用匿名函数>
    s=subs(s, old, new)   %替换后的符号表达式放入s中
        f1=subs(f, [x,y,z].[1,3,2])   % f中有3个参数
        fval=subs(f, {x,y}, {1,2})
        fval=subs(f, {x,y}, {[1,2],3})   % 返回一个数组，包含x=1和2的值
3.符号表达式的化简simplify
    syms x y
    s1=simplify(cos(x)^2-sin(x)^2)   % 返回s1=cos(2*x)，同时赋值给s1
    pretty：美化表达式
        pretty(cos(x)^2-sin(x)^2)
4.符号计算精度及其数据类型转换
    double(s) 将符号表达式s转化为双精度数值
    vpa(s) 计算符号表达式s的数值结果,不改变符号的sym类型
    vpa(s, n) 采用n位有效数字计算精度求s的数值结果
    digits 显示vpa计算结果的有效数字的位数
    digits(n) 设置vpa计算结果的有效数字的位数，设置之后的有效位数为默认值
    char(s) 将符号表达式s转化为字符串
5.复合运算函数compose
    compose(f, g)   % 返回复合函数f(g(y))，其中f=f(x),g=g(y)，x和y分别为findsym(symvar)从f、g中找到的符号变量
    compose(f, g, z)   % 返回复合函数f(g(z)), f=f(x),g=g(y)
    compose(f, g, x, y, z)   % 返回复合函数f(g(z))，将x=g(y)代入f(x)中, 最后用指定的变量z代替变量y
        syms x y t
        f = 1 / (1 + x);
        g = sin(y)^2
        h = compose(f, g, x, y, t)
        运行结果：
        h = 1 / (sin(t)^2 + 1)
6.计算极限函数limit
    limit(f, x, a)   % 计算f(x)当x趋向于a的极限
    limit(f, x, a, 'right')   % 计算右极限
    limit(f, x, a, 'left')   % 计算左极限
7.求导计算diff
    diff(s, v)   % 求s对自变量v的1阶导数
    diff(s, v, n)   % 求s对自变量v的n阶导数
8.符号积分函数int
    s=int(expr, var)   % 以expr表达式中的变量var为积分变量计算不定积分
    s=int(expr, var, a, b)   % 以expr表达式中的变量var为积分变量计算定积分，积分上下限分别为b和a
9.泰勒多项式函数taylor
    taylor(f)   % 计算f的5阶麦克劳林多项式
    taylor(f, v, Name, Value)   % v表示自变量，name表示属性名，value为属性值
    taylor(f, v, a)   % 计算f(v)在点a展开的泰勒多项式
    举例：
    ·taylor(exp(x), x, 0, 'order', 8)   % 展开8项
    ·taylor(exp(x), x, 'expansionpoint', 0, 'order', 8)   % 在0点展开8项
10.级数求和symsum
    s=symsum(expr, v, a, b)   % expr是函数，v是变量，a为级数初始值，b为级数结束值
11.求解方程组solve
    s=solve('a*x+b*y=10', 'a*x-b*y=20', 'x', 'y')   
    % 新版本必须先定义符号变量，去除单引号，=改为==
    syms a,b,x,y
    s=solve(a*x+b*y==10, a*x-b*y==20, x, y)
12.求解微分方程dsolve
    1)用字符串描述微分方程及其初始条件
    2)导数的表示规则：以未知函数y为例,“Dy”表示对y的1阶导数，“D2y”表示对y的2阶导数，其他各阶导数类似
    y = dsolve('Dy=(10-0.02*t)*t', 'y(0)=4', 't')   
        第一个位置是微分方程
        第二个位置设定一个初始值，不设定默认为一常数
        第三个为变量，不设定自变量默认为t
13.实验：验证泰勒展开
    syms x;
    fx = exp(x);
    x0 = 0;
    n = [2 5 7]
    for i=1: length(n)
        hx(i) = taylor(fx, x, 'order', n(i), 'expansionpoint', x0);   % 表示在x0处展开n阶泰勒展开
    end
    xp = linspace(-3, 3, 40);
    y = subs(fx, x, xp);
    y1 = subs(hx(1), x, xp);
    y2 = subs(hx(2), x, xp);
    y3 = subs(hx(3), x, xp);   % 将hx的变量变为xp，subs可以进行符号表达式的替换
    h = plot(xp, y, 'r', xp, y1, 'k', xp, y2, 'b', xp, y3,' c', 'linewidth', 2);   % linewidth表示设置线段宽度
    legend(h, 'source', 'n=1', 'n=4', 'n=6');   % 设置曲线标记
    set(gca, 'fontsize', 16);   % 设置字体大小
14.实验：人为设定误差
    fac=1;
    n=5;
    s(1)=2;
    for i=2:n
        fac=fac*i;
        s(i)=s(i-1)+1/fac;
    end
    err=abs(s-exp(1))
    semilogy(1:n,err,'-o');






